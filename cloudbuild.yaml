steps:
  # 1. Installation des dépendances Node.js
  - name: 'node:22.0.0-alpine'
    entrypoint: 'npm'
    args: ['ci']
    dir: '.'
    id: 'install-node-dependencies'

  # 2. Exécution des tests Angular et génération des rapports de couverture/JUnit
  - name: 'node:22.0.0-alpine'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        apk add --no-cache chromium
        export CHROME_BIN=/usr/bin/chromium-browser
        npm run test:ci:junit
    dir: '.'
    allowFailure: true
    waitFor: ['install-node-dependencies']
    id: 'run-angular-tests'

  # 3. Construction de l’application Angular
  - name: 'node:22.0.0-alpine'
    entrypoint: 'npm'
    args: [ 'run', 'build', '--', '--configuration', 'production' ]
    dir: '.'
    waitFor: [ 'run-angular-tests' ]
    id: 'build-angular-app'

  # 4. Analyse SonarQube
  - name: 'sonarsource/sonar-scanner-cli:latest'
    args:
      - '-Dsonar.projectKey=${_SONAR_FRONTEND_PROJECT_KEY}'
      - '-Dsonar.organization=${_SONAR_ORGANIZATION}'
      - '-Dsonar.host.url=${_SONAR_HOST_URL}'
      - '-Dsonar.sources=src'
      - '-Dsonar.tests=src'
      - '-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info'
      - '-Dsonar.testExecutionReportPaths=junit/TESTS-karma.xml'
    secretEnv:
      - 'SONAR_TOKEN'
    waitFor: ['build-angular-app']
    id: 'run-sonarqube-analysis'

  # 4. Construction de l’image Docker
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY_FRONTEND}/${_IMAGE_NAME_FRONTEND}:${COMMIT_SHA}'
      - '.'
    dir: '.'
    env: [ 'DOCKER_BUILDKIT=1' ]
    waitFor: ['run-sonarqube-analysis']
    id: 'build-docker-image'

  # 5. Push de l'image Docker vers Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    env: [ 'DOCKER_BUILDKIT=1' ]
    args:
      - 'push'
      - '${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY_FRONTEND}/${_IMAGE_NAME_FRONTEND}:${COMMIT_SHA}'
    waitFor: ['build-docker-image']
    id: 'push-to-artifact-registry'

  # 6. Déploiement sur Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME_FRONTEND}'
      - '--image=${_GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY_FRONTEND}/${_IMAGE_NAME_FRONTEND}:${COMMIT_SHA}'
      - '--platform=managed'
      - '--region=${_CLOUD_RUN_REGION}'
      - '--allow-unauthenticated'
      - '--port=4200'
    waitFor: ['push-to-artifact-registry']
    id: 'deploy-to-cloud-run'

availableSecrets:
  secretManager:
    - env: SONAR_TOKEN
      versionName: projects/${PROJECT_ID}/secrets/sonar-token/versions/latest

substitutions:
  _GAR_LOCATION: europe-west9
  _REPOSITORY_FRONTEND: docker
  _IMAGE_NAME_FRONTEND: frontend
  _SERVICE_NAME_FRONTEND: frontend-service
  _CLOUD_RUN_REGION: europe-west9
  _SONAR_HOST_URL: https://sonarcloud.io/
  _SONAR_ORGANIZATION: krazytop
  _SONAR_FRONTEND_PROJECT_KEY: krazytop_frontend
